name: CI/CD

on:
  push:
    branches:
      - production

jobs:
  build:
    runs-on: "ubuntu-22.04"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          coverage: none

      - name: Use Composer dependencies cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/composer
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Use npm dependencies cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader
          npm ci
          npm run build
          
      # Créer manuellement le composant manquant
      - name: Create missing Laravel component
        run: |
          mkdir -p vendor/laravel/framework/src/Illuminate/Foundation/resources/exceptions/renderer/components/icons
          echo '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 flex-none"><circle cx="12" cy="12" r="4"></circle><path d="M12 2v2"></path><path d="M12 20v2"></path><path d="m4.93 4.93 1.41 1.41"></path><path d="m17.66 17.66 1.41 1.41"></path><path d="M2 12h2"></path><path d="M20 12h2"></path><path d="m6.34 17.66-1.41 1.41"></path><path d="m19.07 4.93-1.41 1.41"></path></svg>' > vendor/laravel/framework/src/Illuminate/Foundation/resources/exceptions/renderer/components/icons/sun.blade.php

      # Extraire et modifier les hooks
      - name: Modify deployment hooks
        run: |
          # Créer le répertoire des hooks si nécessaire
          mkdir -p .github/deployment/hooks
          
          # Extraire les hooks existants
          tar -xf artifacts.tar.gz .github/deployment/hooks/ || true
          
          # Vérifier et modifier le hook before-activation.sh
          if [ -f ".github/deployment/hooks/before-activation.sh" ]; then
            # Remplacer la commande view:cache par un message d'information
            sed -i 's/php artisan view:cache/echo "Skipping view:cache to avoid component errors"/g' .github/deployment/hooks/before-activation.sh
          else
            # Créer un hook before-activation.sh si nécessaire
            cat > .github/deployment/hooks/before-activation.sh << 'EOF'
#!/bin/bash
set -e

php_executable=$1
base_directory=$2
artifacts_path=$3

# Exécuter les commandes standard de Laravel sauf view:cache
cd "$base_directory/current"
$php_executable artisan config:cache
$php_executable artisan route:cache
# Nous sautons intentionnellement la commande view:cache
echo "Skipping view:cache to avoid component errors"

# Vérifier si le fichier storage/app/public existe
if [[ -d "storage/app/public" ]]; then
    $php_executable artisan storage:link
fi
EOF
            chmod +x .github/deployment/hooks/before-activation.sh
          fi
          
          # Vérifier et modifier le hook after-activation.sh si nécessaire
          if [ -f ".github/deployment/hooks/after-activation.sh" ]; then
            # Aussi remplacer là si nécessaire
            sed -i 's/php artisan view:cache/echo "Skipping view:cache to avoid component errors"/g' .github/deployment/hooks/after-activation.sh
          fi
          
          # S'assurer que tous les autres hooks sont présents
          for hook in set-file-permissions.sh flush-opcache.sh; do
            if [ ! -f ".github/deployment/hooks/$hook" ]; then
              # Créer des hooks par défaut si nécessaires
              if [ "$hook" = "set-file-permissions.sh" ]; then
                cat > .github/deployment/hooks/set-file-permissions.sh << 'EOF'
#!/bin/bash
set -e

php_executable=$1
release_directory=$2

echo "Making newly deployed code writeable for both user and nginx/fpm user."
find "$release_directory" -type d -exec chmod 775 {} \;
find "$release_directory" -type f -exec chmod 664 {} \;
EOF
                chmod +x .github/deployment/hooks/set-file-permissions.sh
              elif [ "$hook" = "flush-opcache.sh" ]; then
                cat > .github/deployment/hooks/flush-opcache.sh << 'EOF'
#!/bin/bash
set -e

php_executable=$1
current_directory_path=$2
previous_release_directory_path=$3

# Aucune action spécifique pour OPcache ici
echo "No OPcache flush needed"
EOF
                chmod +x .github/deployment/hooks/flush-opcache.sh
              fi
            fi
          done

      - name: Compress deployment artifacts
        run: |
          tar --create --gzip \
          --exclude="bootstrap/cache/*" \
          --exclude="node_modules" \
          --exclude="public/storage" \
          --exclude="storage" \
          --exclude="tests" \
          --file ~/artifacts.tar.gz * .github/deployment

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: ~/artifacts.tar.gz
          retention-days: 1

  deploy-production:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/production'
    runs-on: "ubuntu-22.04"
    steps:
      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts

      - name: Deploy
        env:
          base_directory: "~/www"
          ssh_user: "converge"
          ssh_host: 89.117.36.52
          ssh_port: 22
          private_ssh_key: "${{ secrets.SSH_PRIVATE_KEY }}"
          ssh_known_hosts: "${{ secrets.SSH_KNOWN_HOSTS }}"
          php_executable: "php"
        run: tar -xf artifacts.tar.gz .github/deployment/prepare.sh -O | bash -se -- "$base_directory" "$ssh_user" "$ssh_host" "$ssh_port" "$private_ssh_key" "$ssh_known_hosts" "$php_executable"
